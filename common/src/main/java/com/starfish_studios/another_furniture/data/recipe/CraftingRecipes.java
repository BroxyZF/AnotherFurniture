package com.starfish_studios.another_furniture.data.recipe;

import com.starfish_studios.another_furniture.registry.AFBlocks;
import net.minecraft.advancements.critereon.InventoryChangeTrigger;
import net.minecraft.data.recipes.FinishedRecipe;
import net.minecraft.data.recipes.ShapedRecipeBuilder;
import net.minecraft.tags.ItemTags;
import net.minecraft.world.item.Items;

import java.util.function.Consumer;

public class CraftingRecipes {
    public static void register(Consumer<FinishedRecipe> consumer) {
        recipes(consumer);
    }

    private static void recipes(Consumer<FinishedRecipe> consumer) {

        // Chairs
        ShapedRecipeBuilder.shaped(AFBlocks.OAK_CHAIR.get(), 3)
                .pattern("# ")
                .pattern("##")
                .pattern("//")
                .define('#', Items.OAK_PLANKS)
                .define('/', Items.STICK)
                .unlockedBy("has_planks", InventoryChangeTrigger.TriggerInstance.hasItems(Items.OAK_PLANKS))
                .group("chairs")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.SPRUCE_CHAIR.get(), 3)
                .pattern("# ")
                .pattern("##")
                .pattern("//")
                .define('#', Items.SPRUCE_PLANKS)
                .define('/', Items.STICK)
                .unlockedBy("has_planks", InventoryChangeTrigger.TriggerInstance.hasItems(Items.SPRUCE_PLANKS))
                .group("chairs")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.BIRCH_CHAIR.get(), 3)
                .pattern("# ")
                .pattern("##")
                .pattern("//")
                .define('#', Items.BIRCH_PLANKS)
                .define('/', Items.STICK)
                .unlockedBy("has_planks", InventoryChangeTrigger.TriggerInstance.hasItems(Items.BIRCH_PLANKS))
                .group("chairs")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.JUNGLE_CHAIR.get(), 3)
                .pattern("# ")
                .pattern("##")
                .pattern("//")
                .define('#', Items.JUNGLE_PLANKS)
                .define('/', Items.STICK)
                .unlockedBy("has_planks", InventoryChangeTrigger.TriggerInstance.hasItems(Items.JUNGLE_PLANKS))
                .group("chairs")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.ACACIA_CHAIR.get(), 3)
                .pattern("# ")
                .pattern("##")
                .pattern("//")
                .define('#', Items.ACACIA_PLANKS)
                .define('/', Items.STICK)
                .unlockedBy("has_planks", InventoryChangeTrigger.TriggerInstance.hasItems(Items.ACACIA_PLANKS))
                .group("chairs")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.DARK_OAK_CHAIR.get(), 3)
                .pattern("# ")
                .pattern("##")
                .pattern("//")
                .define('#', Items.DARK_OAK_PLANKS)
                .define('/', Items.STICK)
                .unlockedBy("has_planks", InventoryChangeTrigger.TriggerInstance.hasItems(Items.DARK_OAK_PLANKS))
                .group("chairs")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.CRIMSON_CHAIR.get(), 3)
                .pattern("# ")
                .pattern("##")
                .pattern("//")
                .define('#', Items.CRIMSON_PLANKS)
                .define('/', Items.STICK)
                .unlockedBy("has_planks", InventoryChangeTrigger.TriggerInstance.hasItems(Items.CRIMSON_PLANKS))
                .group("chairs")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.WARPED_CHAIR.get(), 3)
                .pattern("# ")
                .pattern("##")
                .pattern("//")
                .define('#', Items.WARPED_PLANKS)
                .define('/', Items.STICK)
                .unlockedBy("has_planks", InventoryChangeTrigger.TriggerInstance.hasItems(Items.WARPED_PLANKS))
                .group("chairs")
                .save(consumer);

        // Shelves
        ShapedRecipeBuilder.shaped(AFBlocks.OAK_SHELF.get(), 3)
                .pattern("###")
                .pattern("/  ")
                .define('#', Items.OAK_PLANKS)
                .define('/', Items.STICK)
                .unlockedBy("has_planks", InventoryChangeTrigger.TriggerInstance.hasItems(Items.OAK_PLANKS))
                .group("shelves")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.SPRUCE_SHELF.get(), 3)
                .pattern("###")
                .pattern("/  ")
                .define('#', Items.SPRUCE_PLANKS)
                .define('/', Items.STICK)
                .unlockedBy("has_planks", InventoryChangeTrigger.TriggerInstance.hasItems(Items.SPRUCE_PLANKS))
                .group("shelves")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.BIRCH_SHELF.get(), 3)
                .pattern("###")
                .pattern("/  ")
                .define('#', Items.BIRCH_PLANKS)
                .define('/', Items.STICK)
                .unlockedBy("has_planks", InventoryChangeTrigger.TriggerInstance.hasItems(Items.BIRCH_PLANKS))
                .group("shelves")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.JUNGLE_SHELF.get(), 3)
                .pattern("###")
                .pattern("/  ")
                .define('#', Items.JUNGLE_PLANKS)
                .define('/', Items.STICK)
                .unlockedBy("has_planks", InventoryChangeTrigger.TriggerInstance.hasItems(Items.JUNGLE_PLANKS))
                .group("shelves")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.ACACIA_SHELF.get(), 3)
                .pattern("###")
                .pattern("/  ")
                .define('#', Items.ACACIA_PLANKS)
                .define('/', Items.STICK)
                .unlockedBy("has_planks", InventoryChangeTrigger.TriggerInstance.hasItems(Items.ACACIA_PLANKS))
                .group("shelves")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.DARK_OAK_SHELF.get(), 3)
                .pattern("###")
                .pattern("/  ")
                .define('#', Items.DARK_OAK_PLANKS)
                .define('/', Items.STICK)
                .unlockedBy("has_planks", InventoryChangeTrigger.TriggerInstance.hasItems(Items.DARK_OAK_PLANKS))
                .group("shelves")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.CRIMSON_SHELF.get(), 3)
                .pattern("###")
                .pattern("/  ")
                .define('#', Items.CRIMSON_PLANKS)
                .define('/', Items.STICK)
                .unlockedBy("has_planks", InventoryChangeTrigger.TriggerInstance.hasItems(Items.CRIMSON_PLANKS))
                .group("shelves")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.WARPED_SHELF.get(), 3)
                .pattern("###")
                .pattern("/  ")
                .define('#', Items.WARPED_PLANKS)
                .define('/', Items.STICK)
                .unlockedBy("has_planks", InventoryChangeTrigger.TriggerInstance.hasItems(Items.WARPED_PLANKS))
                .group("shelves")
                .save(consumer);

        // Tables
        ShapedRecipeBuilder.shaped(AFBlocks.OAK_TABLE.get(), 3)
                .pattern("###")
                .pattern("/ /")
                .define('#', Items.OAK_PLANKS)
                .define('/', Items.STICK)
                .unlockedBy("has_planks", InventoryChangeTrigger.TriggerInstance.hasItems(Items.OAK_PLANKS))
                .group("tables")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.SPRUCE_TABLE.get(), 3)
                .pattern("###")
                .pattern("/ /")
                .define('#', Items.SPRUCE_PLANKS)
                .define('/', Items.STICK)
                .unlockedBy("has_planks", InventoryChangeTrigger.TriggerInstance.hasItems(Items.SPRUCE_PLANKS))
                .group("tables")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.BIRCH_TABLE.get(), 3)
                .pattern("###")
                .pattern("/ /")
                .define('#', Items.BIRCH_PLANKS)
                .define('/', Items.STICK)
                .unlockedBy("has_planks", InventoryChangeTrigger.TriggerInstance.hasItems(Items.BIRCH_PLANKS))
                .group("tables")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.JUNGLE_TABLE.get(), 3)
                .pattern("###")
                .pattern("/ /")
                .define('#', Items.JUNGLE_PLANKS)
                .define('/', Items.STICK)
                .unlockedBy("has_planks", InventoryChangeTrigger.TriggerInstance.hasItems(Items.JUNGLE_PLANKS))
                .group("tables")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.ACACIA_TABLE.get(), 3)
                .pattern("###")
                .pattern("/ /")
                .define('#', Items.ACACIA_PLANKS)
                .define('/', Items.STICK)
                .unlockedBy("has_planks", InventoryChangeTrigger.TriggerInstance.hasItems(Items.ACACIA_PLANKS))
                .group("tables")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.DARK_OAK_TABLE.get(), 3)
                .pattern("###")
                .pattern("/ /")
                .define('#', Items.DARK_OAK_PLANKS)
                .define('/', Items.STICK)
                .unlockedBy("has_planks", InventoryChangeTrigger.TriggerInstance.hasItems(Items.DARK_OAK_PLANKS))
                .group("tables")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.CRIMSON_TABLE.get(), 3)
                .pattern("###")
                .pattern("/ /")
                .define('#', Items.CRIMSON_PLANKS)
                .define('/', Items.STICK)
                .unlockedBy("has_planks", InventoryChangeTrigger.TriggerInstance.hasItems(Items.CRIMSON_PLANKS))
                .group("tables")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.WARPED_TABLE.get(), 3)
                .pattern("###")
                .pattern("/ /")
                .define('#', Items.WARPED_PLANKS)
                .define('/', Items.STICK)
                .unlockedBy("has_planks", InventoryChangeTrigger.TriggerInstance.hasItems(Items.WARPED_PLANKS))
                .group("tables")
                .save(consumer);

        // Shutters
        ShapedRecipeBuilder.shaped(AFBlocks.OAK_SHUTTER.get(), 4)
                .pattern("SS")
                .pattern("SS")
                .pattern("SS")
                .define('S', Items.OAK_SLAB)
                .unlockedBy("has_slab", InventoryChangeTrigger.TriggerInstance.hasItems(Items.OAK_SLAB))
                .group("shutters")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.SPRUCE_SHUTTER.get(), 4)
                .pattern("SS")
                .pattern("SS")
                .pattern("SS")
                .define('S', Items.SPRUCE_SLAB)
                .unlockedBy("has_slab", InventoryChangeTrigger.TriggerInstance.hasItems(Items.SPRUCE_SLAB))
                .group("shutters")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.BIRCH_SHUTTER.get(), 4)
                .pattern("SS")
                .pattern("SS")
                .pattern("SS")
                .define('S', Items.BIRCH_SLAB)
                .unlockedBy("has_slab", InventoryChangeTrigger.TriggerInstance.hasItems(Items.BIRCH_SLAB))
                .group("shutters")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.JUNGLE_SHUTTER.get(), 4)
                .pattern("SS")
                .pattern("SS")
                .pattern("SS")
                .define('S', Items.JUNGLE_SLAB)
                .unlockedBy("has_slab", InventoryChangeTrigger.TriggerInstance.hasItems(Items.JUNGLE_SLAB))
                .group("shutters")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.ACACIA_SHUTTER.get(), 4)
                .pattern("SS")
                .pattern("SS")
                .pattern("SS")
                .define('S', Items.ACACIA_SLAB)
                .unlockedBy("has_slab", InventoryChangeTrigger.TriggerInstance.hasItems(Items.ACACIA_SLAB))
                .group("shutters")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.DARK_OAK_SHUTTER.get(), 4)
                .pattern("SS")
                .pattern("SS")
                .pattern("SS")
                .define('S', Items.DARK_OAK_SLAB)
                .unlockedBy("has_slab", InventoryChangeTrigger.TriggerInstance.hasItems(Items.DARK_OAK_SLAB))
                .group("shutters")
                .save(consumer);

        ShapedRecipeBuilder.shaped(AFBlocks.CRIMSON_SHUTTER.get(), 4)
                .pattern("SS")
                .pattern("SS")
                .pattern("SS")
                .define('S', Items.CRIMSON_SLAB)
                .unlockedBy("has_slab", InventoryChangeTrigger.TriggerInstance.hasItems(Items.CRIMSON_SLAB))
                .group("shutters")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.WARPED_SHUTTER.get(), 4)
                .pattern("SS")
                .pattern("SS")
                .pattern("SS")
                .define('S', Items.WARPED_SLAB)
                .unlockedBy("has_slab", InventoryChangeTrigger.TriggerInstance.hasItems(Items.WARPED_SLAB))
                .group("shutters")
                .save(consumer);

        // Planter Boxes
        ShapedRecipeBuilder.shaped(AFBlocks.OAK_PLANTER_BOX.get(), 3)
                .pattern("SDS")
                .pattern("###")
                .define('D', Items.DIRT)
                .define('S', Items.OAK_SLAB)
                .define('#', Items.OAK_PLANKS)
                .unlockedBy("has_slab", InventoryChangeTrigger.TriggerInstance.hasItems(Items.OAK_SLAB))
                .group("planter_boxes")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.SPRUCE_PLANTER_BOX.get(), 3)
                .pattern("SDS")
                .pattern("###")
                .define('D', Items.DIRT)
                .define('S', Items.SPRUCE_SLAB)
                .define('#', Items.SPRUCE_PLANKS)
                .unlockedBy("has_slab", InventoryChangeTrigger.TriggerInstance.hasItems(Items.SPRUCE_SLAB))
                .group("planter_boxes")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.BIRCH_PLANTER_BOX.get(), 3)
                .pattern("SDS")
                .pattern("###")
                .define('D', Items.DIRT)
                .define('S', Items.BIRCH_SLAB)
                .define('#', Items.BIRCH_PLANKS)
                .unlockedBy("has_slab", InventoryChangeTrigger.TriggerInstance.hasItems(Items.BIRCH_SLAB))
                .group("planter_boxes")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.JUNGLE_PLANTER_BOX.get(), 3)
                .pattern("SDS")
                .pattern("###")
                .define('D', Items.DIRT)
                .define('S', Items.JUNGLE_SLAB)
                .define('#', Items.JUNGLE_PLANKS)
                .unlockedBy("has_slab", InventoryChangeTrigger.TriggerInstance.hasItems(Items.JUNGLE_SLAB))
                .group("planter_boxes")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.ACACIA_PLANTER_BOX.get(), 3)
                .pattern("SDS")
                .pattern("###")
                .define('D', Items.DIRT)
                .define('S', Items.ACACIA_SLAB)
                .define('#', Items.ACACIA_PLANKS)
                .unlockedBy("has_slab", InventoryChangeTrigger.TriggerInstance.hasItems(Items.ACACIA_SLAB))
                .group("planter_boxes")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.DARK_OAK_PLANTER_BOX.get(), 3)
                .pattern("SDS")
                .pattern("###")
                .define('D', Items.DIRT)
                .define('S', Items.DARK_OAK_SLAB)
                .define('#', Items.DARK_OAK_PLANKS)
                .unlockedBy("has_slab", InventoryChangeTrigger.TriggerInstance.hasItems(Items.DARK_OAK_SLAB))
                .group("planter_boxes")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.CRIMSON_PLANTER_BOX.get(), 3)
                .pattern("SDS")
                .pattern("###")
                .define('D', Items.DIRT)
                .define('S', Items.CRIMSON_SLAB)
                .define('#', Items.CRIMSON_PLANKS)
                .unlockedBy("has_slab", InventoryChangeTrigger.TriggerInstance.hasItems(Items.CRIMSON_SLAB))
                .group("planter_boxes")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.WARPED_PLANTER_BOX.get(), 3)
                .pattern("SDS")
                .pattern("###")
                .define('D', Items.DIRT)
                .define('S', Items.WARPED_SLAB)
                .define('#', Items.WARPED_PLANKS)
                .unlockedBy("has_slab", InventoryChangeTrigger.TriggerInstance.hasItems(Items.WARPED_SLAB))
                .group("planter_boxes")
                .save(consumer);

        // Stools
        ShapedRecipeBuilder.shaped(AFBlocks.WHITE_STOOL.get(), 3)
                .pattern("#W#")
                .pattern("/ /")
                .define('#', ItemTags.PLANKS)
                .define('W', Items.WHITE_WOOL)
                .define('/', Items.STICK)
                .unlockedBy("has_wool", InventoryChangeTrigger.TriggerInstance.hasItems(Items.WHITE_WOOL))
                .group("stools")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.ORANGE_STOOL.get(), 3)
                .pattern("#W#")
                .pattern("/ /")
                .define('#', ItemTags.PLANKS)
                .define('W', Items.ORANGE_WOOL)
                .define('/', Items.STICK)
                .unlockedBy("has_wool", InventoryChangeTrigger.TriggerInstance.hasItems(Items.ORANGE_WOOL))
                .group("stools")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.MAGENTA_STOOL.get(), 3)
                .pattern("#W#")
                .pattern("/ /")
                .define('#', ItemTags.PLANKS)
                .define('W', Items.MAGENTA_WOOL)
                .define('/', Items.STICK)
                .unlockedBy("has_wool", InventoryChangeTrigger.TriggerInstance.hasItems(Items.MAGENTA_WOOL))
                .group("stools")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.LIGHT_BLUE_STOOL.get(), 3)
                .pattern("#W#")
                .pattern("/ /")
                .define('#', ItemTags.PLANKS)
                .define('W', Items.LIGHT_BLUE_WOOL)
                .define('/', Items.STICK)
                .unlockedBy("has_wool", InventoryChangeTrigger.TriggerInstance.hasItems(Items.LIGHT_BLUE_WOOL))
                .group("stools")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.YELLOW_STOOL.get(), 3)
                .pattern("#W#")
                .pattern("/ /")
                .define('#', ItemTags.PLANKS)
                .define('W', Items.YELLOW_WOOL)
                .define('/', Items.STICK)
                .unlockedBy("has_wool", InventoryChangeTrigger.TriggerInstance.hasItems(Items.YELLOW_WOOL))
                .group("stools")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.LIME_STOOL.get(), 3)
                .pattern("#W#")
                .pattern("/ /")
                .define('#', ItemTags.PLANKS)
                .define('W', Items.LIME_WOOL)
                .define('/', Items.STICK)
                .unlockedBy("has_wool", InventoryChangeTrigger.TriggerInstance.hasItems(Items.LIME_WOOL))
                .group("stools")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.PINK_STOOL.get(), 3)
                .pattern("#W#")
                .pattern("/ /")
                .define('#', ItemTags.PLANKS)
                .define('W', Items.PINK_WOOL)
                .define('/', Items.STICK)
                .unlockedBy("has_wool", InventoryChangeTrigger.TriggerInstance.hasItems(Items.PINK_WOOL))
                .group("stools")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.GRAY_STOOL.get(), 3)
                .pattern("#W#")
                .pattern("/ /")
                .define('#', ItemTags.PLANKS)
                .define('W', Items.GRAY_WOOL)
                .define('/', Items.STICK)
                .unlockedBy("has_wool", InventoryChangeTrigger.TriggerInstance.hasItems(Items.GRAY_WOOL))
                .group("stools")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.LIGHT_GRAY_STOOL.get(), 3)
                .pattern("#W#")
                .pattern("/ /")
                .define('#', ItemTags.PLANKS)
                .define('W', Items.LIGHT_GRAY_WOOL)
                .define('/', Items.STICK)
                .unlockedBy("has_wool", InventoryChangeTrigger.TriggerInstance.hasItems(Items.LIGHT_GRAY_WOOL))
                .group("stools")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.CYAN_STOOL.get(), 3)
                .pattern("#W#")
                .pattern("/ /")
                .define('#', ItemTags.PLANKS)
                .define('W', Items.CYAN_WOOL)
                .define('/', Items.STICK)
                .unlockedBy("has_wool", InventoryChangeTrigger.TriggerInstance.hasItems(Items.CYAN_WOOL))
                .group("stools")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.PURPLE_STOOL.get(), 3)
                .pattern("#W#")
                .pattern("/ /")
                .define('#', ItemTags.PLANKS)
                .define('W', Items.PURPLE_WOOL)
                .define('/', Items.STICK)
                .unlockedBy("has_wool", InventoryChangeTrigger.TriggerInstance.hasItems(Items.PURPLE_WOOL))
                .group("stools")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.BLUE_STOOL.get(), 3)
                .pattern("#W#")
                .pattern("/ /")
                .define('#', ItemTags.PLANKS)
                .define('W', Items.BLUE_WOOL)
                .define('/', Items.STICK)
                .unlockedBy("has_wool", InventoryChangeTrigger.TriggerInstance.hasItems(Items.BLUE_WOOL))
                .group("stools")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.BROWN_STOOL.get(), 3)
                .pattern("#W#")
                .pattern("/ /")
                .define('#', ItemTags.PLANKS)
                .define('W', Items.BROWN_WOOL)
                .define('/', Items.STICK)
                .unlockedBy("has_wool", InventoryChangeTrigger.TriggerInstance.hasItems(Items.BROWN_WOOL))
                .group("stools")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.GREEN_STOOL.get(), 3)
                .pattern("#W#")
                .pattern("/ /")
                .define('#', ItemTags.PLANKS)
                .define('W', Items.GREEN_WOOL)
                .define('/', Items.STICK)
                .unlockedBy("has_wool", InventoryChangeTrigger.TriggerInstance.hasItems(Items.GREEN_WOOL))
                .group("stools")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.RED_STOOL.get(), 3)
                .pattern("#W#")
                .pattern("/ /")
                .define('#', ItemTags.PLANKS)
                .define('W', Items.RED_WOOL)
                .define('/', Items.STICK)
                .unlockedBy("has_wool", InventoryChangeTrigger.TriggerInstance.hasItems(Items.RED_WOOL))
                .group("stools")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.BLACK_STOOL.get(), 3)
                .pattern("#W#")
                .pattern("/ /")
                .define('#', ItemTags.PLANKS)
                .define('W', Items.BLACK_WOOL)
                .define('/', Items.STICK)
                .unlockedBy("has_wool", InventoryChangeTrigger.TriggerInstance.hasItems(Items.BLACK_WOOL))
                .group("stools")
                .save(consumer);


        // Curtains
        ShapedRecipeBuilder.shaped(AFBlocks.WHITE_CURTAIN.get(), 3)
                .pattern("//")
                .pattern("WW")
                .pattern("WW")
                .define('W', Items.WHITE_WOOL)
                .define('/', Items.STICK)
                .unlockedBy("has_wool", InventoryChangeTrigger.TriggerInstance.hasItems(Items.WHITE_WOOL))
                .group("curtains")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.ORANGE_CURTAIN.get(), 3)
                .pattern("//")
                .pattern("WW")
                .pattern("WW")
                .define('W', Items.WHITE_WOOL)
                .define('/', Items.STICK)
                .unlockedBy("has_wool", InventoryChangeTrigger.TriggerInstance.hasItems(Items.ORANGE_WOOL))
                .group("curtains")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.MAGENTA_CURTAIN.get(), 3)
                .pattern("//")
                .pattern("WW")
                .pattern("WW")
                .define('W', Items.WHITE_WOOL)
                .define('/', Items.STICK)
                .unlockedBy("has_wool", InventoryChangeTrigger.TriggerInstance.hasItems(Items.MAGENTA_WOOL))
                .group("curtains")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.LIGHT_BLUE_CURTAIN.get(), 3)
                .pattern("//")
                .pattern("WW")
                .pattern("WW")
                .define('W', Items.WHITE_WOOL)
                .define('/', Items.STICK)
                .unlockedBy("has_wool", InventoryChangeTrigger.TriggerInstance.hasItems(Items.LIGHT_BLUE_WOOL))
                .group("curtains")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.YELLOW_CURTAIN.get(), 3)
                .pattern("//")
                .pattern("WW")
                .pattern("WW")
                .define('W', Items.WHITE_WOOL)
                .define('/', Items.STICK)
                .unlockedBy("has_wool", InventoryChangeTrigger.TriggerInstance.hasItems(Items.YELLOW_WOOL))
                .group("curtains")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.LIME_CURTAIN.get(), 3)
                .pattern("//")
                .pattern("WW")
                .pattern("WW")
                .define('W', Items.WHITE_WOOL)
                .define('/', Items.STICK)
                .unlockedBy("has_wool", InventoryChangeTrigger.TriggerInstance.hasItems(Items.LIME_WOOL))
                .group("curtains")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.PINK_CURTAIN.get(), 3)
                .pattern("//")
                .pattern("WW")
                .pattern("WW")
                .define('W', Items.WHITE_WOOL)
                .define('/', Items.STICK)
                .unlockedBy("has_wool", InventoryChangeTrigger.TriggerInstance.hasItems(Items.PINK_WOOL))
                .group("curtains")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.GRAY_CURTAIN.get(), 3)
                .pattern("//")
                .pattern("WW")
                .pattern("WW")
                .define('W', Items.WHITE_WOOL)
                .define('/', Items.STICK)
                .unlockedBy("has_wool", InventoryChangeTrigger.TriggerInstance.hasItems(Items.GRAY_WOOL))
                .group("curtains")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.LIGHT_GRAY_CURTAIN.get(), 3)
                .pattern("//")
                .pattern("WW")
                .pattern("WW")
                .define('W', Items.WHITE_WOOL)
                .define('/', Items.STICK)
                .unlockedBy("has_wool", InventoryChangeTrigger.TriggerInstance.hasItems(Items.LIGHT_GRAY_WOOL))
                .group("curtains")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.CYAN_CURTAIN.get(), 3)
                .pattern("//")
                .pattern("WW")
                .pattern("WW")
                .define('W', Items.WHITE_WOOL)
                .define('/', Items.STICK)
                .unlockedBy("has_wool", InventoryChangeTrigger.TriggerInstance.hasItems(Items.CYAN_WOOL))
                .group("curtains")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.PURPLE_CURTAIN.get(), 3)
                .pattern("//")
                .pattern("WW")
                .pattern("WW")
                .define('W', Items.WHITE_WOOL)
                .define('/', Items.STICK)
                .unlockedBy("has_wool", InventoryChangeTrigger.TriggerInstance.hasItems(Items.PURPLE_WOOL))
                .group("curtains")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.BLUE_CURTAIN.get(), 3)
                .pattern("//")
                .pattern("WW")
                .pattern("WW")
                .define('W', Items.WHITE_WOOL)
                .define('/', Items.STICK)
                .unlockedBy("has_wool", InventoryChangeTrigger.TriggerInstance.hasItems(Items.BLUE_WOOL))
                .group("curtains")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.BROWN_CURTAIN.get(), 3)
                .pattern("//")
                .pattern("WW")
                .pattern("WW")
                .define('W', Items.WHITE_WOOL)
                .define('/', Items.STICK)
                .unlockedBy("has_wool", InventoryChangeTrigger.TriggerInstance.hasItems(Items.BROWN_WOOL))
                .group("curtains")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.GREEN_CURTAIN.get(), 3)
                .pattern("//")
                .pattern("WW")
                .pattern("WW")
                .define('W', Items.WHITE_WOOL)
                .define('/', Items.STICK)
                .unlockedBy("has_wool", InventoryChangeTrigger.TriggerInstance.hasItems(Items.GREEN_WOOL))
                .group("curtains")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.RED_CURTAIN.get(), 3)
                .pattern("//")
                .pattern("WW")
                .pattern("WW")
                .define('W', Items.WHITE_WOOL)
                .define('/', Items.STICK)
                .unlockedBy("has_wool", InventoryChangeTrigger.TriggerInstance.hasItems(Items.RED_WOOL))
                .group("curtains")
                .save(consumer);
        ShapedRecipeBuilder.shaped(AFBlocks.BLACK_CURTAIN.get(), 3)
                .pattern("//")
                .pattern("WW")
                .pattern("WW")
                .define('W', Items.WHITE_WOOL)
                .define('/', Items.STICK)
                .unlockedBy("has_wool", InventoryChangeTrigger.TriggerInstance.hasItems(Items.BLACK_WOOL))
                .group("curtains")
                .save(consumer);

        // Service Bell
        ShapedRecipeBuilder.shaped(AFBlocks.SERVICE_BELL.get(), 3)
                .pattern(" N ")
                .pattern("III")
                .define('N', Items.IRON_NUGGET)
                .define('I', Items.IRON_INGOT)
                .unlockedBy("has_nugget", InventoryChangeTrigger.TriggerInstance.hasItems(Items.WHITE_WOOL))
                .save(consumer);
    }
}